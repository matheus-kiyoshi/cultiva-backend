generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String    @id @default(uuid())
  name              String    @db.VarChar(30)
  description       String    @db.VarChar(256)
  manufacturingDate DateTime
  expirationDate    DateTime
  soldOut           Boolean   @default(true)
  quantity          Int       @default(0)
  price             Decimal
  rating            Int[]
  images            String[]
  createdAt         DateTime  @default(now())
  producerId        String
  buys              Buy[]
  comments          Comment[]
  producer          Producer  @relation(fields: [producerId], references: [userId])
  sales             Sale[]
  cart              Cart[]
  favorites         Client[]
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(30)
  email     String    @unique
  password  String
  token     String?
  telephone String?
  addressId String?
  rating    Int[]     @default([])
  createdAt DateTime  @default(now())
  address   Address?
  client    Client?
  comments  Comment[]
  producer  Producer?
  icon      String?
}

model Producer {
  userId   String    @id
  cpf      String?   @unique
  cnpj     String?   @unique
  user     User      @relation(fields: [userId], references: [id])
  products Product[]
  sales    Sale[]
}

model Client {
  userId             String    @id
  purchases          Buy[]
  user               User      @relation(fields: [userId], references: [id])
  commentsOnProducts Comment[]
  cart               Cart[]
  favorites          Product[] 
}

model Cart {
  cartId String @id @default(uuid())
  clientId String 
  productId String
  client Client @relation(fields: [clientId], references: [userId])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id            String   @id @default(uuid())
  value         Decimal
  paymentMethod String
  createdAt     DateTime @default(now())
  buy           Buy[]
  sale          Sale[]
}

model Buy {
  id        String  @id @default(uuid())
  productId String
  clientId  String
  orderId   String
  quantity  Int
  client    Client  @relation(fields: [clientId], references: [userId])
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Sale {
  id         String   @id @default(uuid())
  productId  String
  producerId String
  orderId    String
  quantity   Int
  order      Order    @relation(fields: [orderId], references: [id])
  producer   Producer @relation(fields: [producerId], references: [userId])
  product    Product  @relation(fields: [productId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  clientId  String
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  productId String?
  client    Client   @relation(fields: [clientId], references: [userId])
  product   Product? @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Address {
  id         String  @id @default(uuid())
  street     String
  number     Int
  district   String
  complement String
  cep        String
  city       String
  state      String
  userId     String? @unique
  user       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}