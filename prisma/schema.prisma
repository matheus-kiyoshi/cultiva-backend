generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String   @id @default(uuid())
  name              String   @db.VarChar(30)
  description       String   @db.VarChar(256)
  manufacturingDate DateTime
  expirationDate    DateTime
  soldOut           Boolean  @default(true)
  quantity          Int      @default(0)
  price             Decimal
  rating            Int[]
  createdAt         DateTime @default(now())

  producer   Producer  @relation(fields: [producerId], references: [userId])
  producerId String
  buys       Buy[]
  sales      Sale[]
  comments   Comment[]
  favorites  Client[]
}

model User {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(30)
  email     String     @unique
  telephone Telephone?
  address   Address    @relation(fields: [addressId], references: [id])
  addressId String
  rating    Int[]
  createdAt DateTime   @default(now())

  producer Producer?
  client   Client?
  comments Comment[]
}

model Producer {
  userId   String    @id
  user     User      @relation(fields: [userId], references: [id])
  products Product[]
  cpf      String?   @unique
  cnpj     String?   @unique
  sales    Sale[]
}

model Client {
  userId    String    @id
  user      User      @relation(fields: [userId], references: [id])
  favorites Product[]
  purchases Buy[]
}

model Order {
  id            String   @id @default(uuid())
  value         Decimal
  paymentMethod String
  createdAt     DateTime @default(now())
  buy           Buy[]
  sale          Sale[]
}

model Buy {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  client    Client  @relation(fields: [clientId], references: [userId])
  clientId  String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
}

model Sale {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  producer   Producer @relation(fields: [producerId], references: [userId])
  producerId String
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  quantity   Int
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Address {
  id         String @id @default(uuid())
  street     String
  number     Int
  district   String
  cep        String
  complement String
  users      User[]
}

model Telephone {
  id     String @id @default(uuid())
  ddd    Int
  number String
  type   String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}
